//--------------------------------------
//--- 010 Editor v5.0 Binary Template
//
// File: *.cnut
// Author: unknown
// Modified: Kuriko Moe
// Revision:
// Purpose: SQuirrel 3.0 nut file
//--------------------------------------
local int defaultCharSet = CHARSET_CHINESE_S;

enum <int> SQObjAttrField
{
	SQOBJECT_REF_COUNTED	= 0x08000000,
	SQOBJECT_NUMERIC		= 0x04000000,
	SQOBJECT_DELEGABLE		= 0x02000000,
	SQOBJECT_CANBEFALSE		= 0x01000000,
};

enum <int> SQObjTypeField
{
	_RT_NULL			= 0x00000001,
	_RT_INTEGER			= 0x00000002,
	_RT_FLOAT			= 0x00000004,
	_RT_BOOL			= 0x00000008,
	_RT_STRING			= 0x00000010,
	_RT_TABLE			= 0x00000020,
	_RT_ARRAY			= 0x00000040,
	_RT_USERDATA		= 0x00000080,
	_RT_CLOSURE			= 0x00000100,
	_RT_NATIVECLOSURE	= 0x00000200,
	_RT_GENERATOR		= 0x00000400,
	_RT_USERPOINTER		= 0x00000800,
	_RT_THREAD			= 0x00001000,
	_RT_FUNCPROTO		= 0x00002000,
	_RT_CLASS			= 0x00004000,
	_RT_INSTANCE		= 0x00008000,
	_RT_WEAKREF			= 0x00010000,
	_RT_OUTER			= 0x00020000,
};

typedef enum tagSQObjectType{
	OT_NULL =			(_RT_NULL|SQOBJECT_CANBEFALSE),
	OT_INTEGER =		(_RT_INTEGER|SQOBJECT_NUMERIC|SQOBJECT_CANBEFALSE),
	OT_FLOAT =			(_RT_FLOAT|SQOBJECT_NUMERIC|SQOBJECT_CANBEFALSE),
	OT_BOOL =			(_RT_BOOL|SQOBJECT_CANBEFALSE),
	OT_STRING =			(_RT_STRING|SQOBJECT_REF_COUNTED),
	OT_TABLE =			(_RT_TABLE|SQOBJECT_REF_COUNTED|SQOBJECT_DELEGABLE),
	OT_ARRAY =			(_RT_ARRAY|SQOBJECT_REF_COUNTED),
	OT_USERDATA =		(_RT_USERDATA|SQOBJECT_REF_COUNTED|SQOBJECT_DELEGABLE),
	OT_CLOSURE =		(_RT_CLOSURE|SQOBJECT_REF_COUNTED),
	OT_NATIVECLOSURE =	(_RT_NATIVECLOSURE|SQOBJECT_REF_COUNTED),
	OT_GENERATOR =		(_RT_GENERATOR|SQOBJECT_REF_COUNTED),
	OT_USERPOINTER =	_RT_USERPOINTER,
	OT_THREAD =			(_RT_THREAD|SQOBJECT_REF_COUNTED) ,
	OT_FUNCPROTO =		(_RT_FUNCPROTO|SQOBJECT_REF_COUNTED), //internal usage only
	OT_CLASS =			(_RT_CLASS|SQOBJECT_REF_COUNTED),
	OT_INSTANCE =		(_RT_INSTANCE|SQOBJECT_REF_COUNTED|SQOBJECT_DELEGABLE),
	OT_WEAKREF =		(_RT_WEAKREF|SQOBJECT_REF_COUNTED),
	OT_OUTER =			(_RT_OUTER|SQOBJECT_REF_COUNTED) //internal usage only
}SQObjectType;

typedef struct tagSQObject
{
	SQObjectType _type;
    if (OT_STRING == _type)
    {
        int len;
        if (len)
            char str[len];
    }
    else if (OT_INTEGER == _type ||
        OT_BOOL == _type)
    {
        int val;
    }
    else if (OT_FLOAT == _type)
    {
        float val;
    }
} SQObject <read=ReadSQObject>;

wstring ReadSQObject( SQObject& obj)
{
    string s;
    if (OT_STRING == obj._type)
    {
        if (obj.len)
            return StringToWString(obj.str, defaultCharSet);
        else
            return "[null string]";
    }
    else if (OT_INTEGER == obj._type)
    {
        SPrintf(s, "%d", obj.val);
    }
    else if (OT_BOOL == obj._type)
    {
        if (obj.val)
            return "true";
        else
            return "false";
    }
    else if (OT_FLOAT == obj._type)
    {
        SPrintf(s, "%f", obj.val);
    }
    else
    {
        return EnumToString(obj._type);
    }
    return s;
}

enum <char> SQOpcode
{
_OP_LINE = 0,
_OP_LOAD = 1,
_OP_LOADINT = 2,
_OP_LOADFLOAT = 3,
_OP_DLOAD = 4,
_OP_TAILCALL = 5,
_OP_CALL = 6,
_OP_PREPCALL = 7,
_OP_PREPCALLK = 8,
_OP_GETK = 9,
_OP_MOVE = 10,
_OP_NEWSLOT = 11,
_OP_DELETE = 12,
_OP_SET = 13,
_OP_GET = 14,
_OP_EQ = 15,
_OP_NE = 16,
_OP_ARITH = 17,
_OP_BITW = 18,
_OP_RETURN = 19,
_OP_LOADNULLS = 20,
_OP_LOADROOTTABLE = 21,
_OP_LOADBOOL = 22,
_OP_DMOVE = 23,
_OP_JMP = 24,
_OP_JNZ = 25,
_OP_JZ = 26,
_OP_LOADFREEVAR = 27,
_OP_VARGC = 28,
_OP_GETVARGV = 29,
_OP_NEWTABLE = 30,
_OP_NEWARRAY = 31,
_OP_APPENDARRAY = 32,
_OP_GETPARENT = 33,
_OP_COMPARITH = 34,
_OP_COMPARITHL = 35,
_OP_INC = 36,
_OP_INCL = 37,
_OP_PINC = 38,
_OP_PINCL = 39,
_OP_CMP = 40,
_OP_EXISTS = 41,
_OP_INSTANCEOF = 42,
_OP_AND = 43,
_OP_OR = 44,
_OP_NEG = 45,
_OP_NOT = 46,
_OP_BWNOT = 47,
_OP_CLOSURE = 48,
_OP_YIELD = 49,
_OP_RESUME = 50,
_OP_FOREACH = 51,
_OP_POSTFOREACH = 52,
_OP_DELEGATE = 53,
_OP_CLONE = 54,
_OP_TYPEOF = 55,
_OP_PUSHTRAP = 56,
_OP_POPTRAP = 57,
_OP_THROW = 58,
_OP_CLASS = 59,
_OP_NEWSLOTA = 60
};

struct NutHeader
{
    ushort  magicFAFA <format=hex>;
    char    magicSQIR[4];
    int     sizeChar;
    


    if (header.magicFAFA != 0xFAFA ||
        header.magicSQIR != "RIQS")
    {
        Warning("Confirm Header Failed\n");
        return -1;
    }
};

struct NutEnd
{
    char magicTAIL[4];
    if (magicTAIL != "LIAT")
    {
        Warning("Confirm End Failed\n");
        return -1;
    }
};

struct OuterValueInfo
{
    int type;
	SQObject src;
	SQObject name;
};

struct LocalVarInfo
{
	SQObject name;
    int pos;
	int start_op;
	int end_op;
};

struct LineInfo
{
	int line;
	int op;
};

typedef struct tagInstruction
{
    local int ip;
	union tagArg1
	{
		int arg1;
		float arg1_float;
	} arg1;

	SQOpcode op<format=hex>;
	char arg0, arg2, arg3;
} Instruction<read=ReadInstruction>;

string ReadInstruction(Instruction& dat)
{
    string s;
    switch (dat.op)
    {
    case _OP_JMP:
        SPrintf(s, "op_jmp: %d(%d)", dat.ip + dat.arg1.arg1 + 1, dat.arg1.arg1);
        break;
    //case _OP_JCMP:
    //    SPrintf(s, "op_jcmp: %d(%d)", dat.ip + dat.arg1.arg1 + 1, dat.arg1.arg1);
    //    break;
    case _OP_JZ:
        SPrintf(s, "op_jz: %d(%d)", dat.ip + dat.arg1.arg1 + 1, dat.arg1.arg1);
        break;
    case _OP_FOREACH:
        SPrintf(s, "op_foreach: %d(%d)", dat.ip + dat.arg1.arg1 + 1, dat.arg1.arg1);
        break;
    case _OP_LINE:
        SPrintf(s, "op_line: %d", dat.arg1.arg1);
        break;
    default:
        s = EnumToString(dat.op);
        break;
    }
    return s;
}

struct Literals (int size)
{
    SQObject m_Literals[size] <optimize=false>;
};
struct Parameters (int size)
{
    SQObject m_Parameters[nParameters] <optimize=false>;
};
struct OuterValues (int size)
{
    OuterValueInfo m_OuterValues[nOuterValues] <optimize=false>;
};
struct LocalVars (int size)
{
    LocalVarInfo m_Locals[nLocalVarInfos] <optimize=false>;
};
struct LineInfos (int size)
{
    LineInfo m_LineInfos[nLineInfos] <optimize=false>;
};
struct DefaultParams (int size)
{
    int m_DefaultParams[nDefaultParams] <optimize=false>;
};
struct Instructions (int size)
{
    Instruction m_Instructions[size] <optimize=false>;
    local int i = 0;
    for (i = 0; i < size; ++i)
        m_Instructions[i].ip = i;
};
struct tagNutFunction;

typedef struct tagNutFunction
{
    if (!ConfirmOnPart()) return -1;
    SQObject m_SourceName;
    SQObject m_Name;

    if (!ConfirmOnPart()) return -1;
    int nLiterals;
    int nParameters;
    int nOuterValues;
    int nLocalVarInfos;
    int nLineInfos;
    int nDefaultParams;
    int nInstructions;
    int nFunctions;

    if (!ConfirmOnPart()) return -1;
    if (nLiterals)
        Literals m_Literals(nLiterals);

    if (!ConfirmOnPart()) return -1;
    if (nParameters)
        Parameters m_Parameters(nParameters);

    if (!ConfirmOnPart()) return -1;
    if (nOuterValues)
        OuterValues m_OuterValues(nOuterValues);

    if (!ConfirmOnPart()) return -1;
    if (nLocalVarInfos)
        LocalVars m_Locals(nLocalVarInfos);

    if (!ConfirmOnPart()) return -1;
    if (nLineInfos)
        LineInfos m_LineInfos(nLineInfos);

    if (!ConfirmOnPart()) return -1;
    if (nDefaultParams)
        DefaultParams m_DefaultParams(nDefaultParams);

    if (!ConfirmOnPart()) return -1;
    if (nInstructions)
        Instructions m_Instructions(nInstructions);

    if (!ConfirmOnPart()) return -1;    
    // local int i;
    // for (i=0; i < nFunctions; i++) 
    //    tagNutFunction child;
    if (nFunctions)
        allocFunctions(nFunctions);

    char unknown[6];
    //int m_StackSize;
    //char m_IsGenerator;
    //int m_VarParams;
} NutFunction <read=ReadNutFunction>;

struct NutFunctions (int size)
{
    NutFunction m_Functions[size] <optimize=false>;
};
void allocFunctions(int size)
{
    NutFunctions m_Functions(size);
}
wstring ReadNutFunction(NutFunction& func)
{
    return ReadSQObject(func.m_Name);
}

struct tagPART
{
    char str[4];
};
char ConfirmOnPart()
{
    tagPART part <hidden=true>;
    if (part.str != "TRAP")
    {
        Warning("Confirm Part Failed\n");
        return false;
    }
    return true;
}

struct NutFile
{
    NutHeader header;
    NutFunction funcMain;
    NutEnd end;
};

#ifndef INCLUCE_TEMPLATE
LittleEndian();
NutFile file;
#endif
