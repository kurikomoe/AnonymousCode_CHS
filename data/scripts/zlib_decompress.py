data = '''
5Vd3fFXFEp6ZvTd7KTcJyT33hk5oCS1AIDQBgVBDS4KAQArFUJT6REGKWCIoiiAW
ehVEQrHQVRQBCWJBpYmIKIg0C/oQUIy875ychYg//3zvn3c33+58s7tnd2fPmZmk
9mhDiohqu4iziGoBiUAS0ArI9xPNlAmVw+uqcKb/1S/4X3tyyG0VRaMOFOkp/bd1
Q9BVo6myUF6UxbJWtsojjr62U7f5y9jO1PxvayXT7U7bzqnvoK5U7hYTXqT10omy
imiy6CFaTWtoH6VTKvWgDOpEfeltYucJhb+BdDcNoWHUm9JoOPUB+5gE+tGUQyPp
PvTfS0ecm51IQ+kBOk4eyK/Sa/Q6baXHaC5dA19AJXgNraM//9FW10lYcTHS7GMv
hTk6TT63tziVcNqSVIqj2OIgtuincEcXQZFOuxIn2U559CZV5FLg22kLbaLdtJP2
ot5B79M70O2h/Wjfpfcg7QYO0y46SE04CjM+dFc7SCfpG4z7mtqyfXNn6RB9Ryls
32AlrskN+TlJ4hbcjrtxOvfi/jyUR/D9XMAeCZcgSiWYqKrUlngZJw9KJ+cmUlB3
5i581y33ksODMduWRvIoHs1jeFKREZP5EZ7Kj/MTN3TT+Ul+ihfc4At5ES/mVfwy
r4Yujzeg3sibeDNv4a28jd/gD5yxe7k7v8Pv8i7uyj3c2cmQ7D1tZXx+1JU78na2
30v7zY2hwvd0L+/jD7kMpLJAOeAAH+IjfJSPcXmwCkBF2zJALHCCv+HKaKsAj/Bp
ror2R/6Jf+FLfJmv8u9cjao7q8cB8UANoCZQy1aKiEfCxH7v6wAJQF375mHZSImS
epDrA4lAA3s/UgHWrixVpTqsXVMaQpcENAIaA02ApkAz4Db7WVJfEsX+flpQS2cX
jPXs1otVNSSfRKMOODoLd2m3Iaxw806qYKVauF3D60jDIr1J0kxuk+aSLIPE/ibv
luEyUkbLv6QVWGsq/JqTgbbAAzJRJssUeVjsL7c90AHoCHQCHpNpkkL2F497ly5k
+8dn5FnpCqkb0B2YI/MkFW0asFiWynJJh9SDCr/hldLT7nP2l466B3AH0FP6yxbZ
Jm/KdnlHeqG3N3An0AfoC+yUfvbbhbGLbpxusSySZShLcZ7PJMN5fpYckUxIeTjv
l2L7l1fkVczYjPoJd+Z0mSmz5Xv5UbLB+gM/ywDUl2Qg6qdlqjwnC+RxnHaOzJUX
IC1HPR9nfUbC1CCMWSFroFssq2SJRKi7nL1Eqxy0L8JXbpHVkidl1WBnHztkI3Sv
oFRVQ6DZJa9B95bk46ybJUENpfB6Kpz+735J8NaDHW8+isbQeHjrh6Gd4PRN+MvI
CZT7t9m5ri73Bpt2y4hp9DTNhMe/+ZtL82ghLaGl8M1bEA+20Rvwz2/BDxOtdces
RaTY4fjivfDR++gD+OGPoM+nT+hT+owOwB8fgp8m+Oyj9AUdoy8hb6AT8M9fw0/b
hYCTTjn1j6c/Rd+inKYzKBfoqqP7jX53e/+gAqc9S+dQzqPA57Df8ZPhHOG0G6k0
l+GyXI7LcwVoNlEsV+YqXJWrcXWO43iugehQi2tzHU7gulyP63MiN0C8SOJG3Bgz
NrurbaZm3JJv59bchpOhb8XtuQO8rx0pljllNXXhv5euRYrtr+3SDSXV2Z9dp0JO
uyXCpEGT7ujSubD0KDKiB9/BPZ1iNIWs1w3ei+3S2ynwE3wn6ju5aOnjjO2DSDaM
7+HhnMfr3dnr+RVEpI1ONILFEI3e5LcgrQHWAuuAEXwfoud7kPYA+cA4nsATEQcn
88dg+4FPgE+Bz4AHOZePo/0KeIxP8bdopyJKTkOcnMFP80w+w2ed9c+hPg9cAL4H
fgBm8fP8As/hPyAXAH8C14G5PI/n80L2wWcVA4oDJWzvx0t4KS/j5fwir+CVbEcG
C7AjQwiIAUoDZYCywEuIw6vZjg51JMHxf325n7ObftzPkfpxBuoMR5fBps0scieZ
nMXZKIZn84AivQN4oFMGcZIMxAqNpKkTc1pIDthgYAgwFBgGtJRWiEVtpYOMBbsP
uB8YB4wHOko3eRRtLtDd8depkia95ClIM8T2zbhxyZTn0b4AZEk2IscCuRkZBsgK
1IVZjV3fRA6vgldeK+sRCV7HmA3ARmCTEx2IXpN37VW5EIW/7rxb9sgH8qHsl0/k
U/R/JAflkByG9LEclS/kGKQ8+gr1V/KVnHAjzAn5Rk7KKTkj56G5AJyVi6jPyb/F
zk0vyxW5Kr/J73JN/pAC+VOuCylWopTyKC8S2EnkU8VUcVVClVR+FQ7NZCqlotA+
SJYKqpCKUaVVGfApVF5VUBVVJRWrKqsq0DxE1VWcilc1VE1VS9VWdaDzDwt/BMn0
x0iPjyPxLUxwrzkJbgk2aWxFbsJtOQUJ2HY3OStMt26mWHY6dZr/mkCZJMkkRbcm
QYVJziC5mXrcTDPslMIOx3YaYacOhSnDyiLJwE6E9iMI5Xa4/lkuIQBHqGhVVlVV
CSrWL/5Bd6EiXcnPfrIo1j/EjxxKebxh2leseImS/vCIyFJR0QErGIopXaZsufIV
KlaKrVylarXqcfE1ataqXSehbr36iQ0aJjVq3KRps9uat2h5e6vWbZLbtmvfoWOn
lM5dunbrnpqW3uOOnr1639mnb7+MzKzs/gMG5gweMtQ/JNz+F6AMEsYmSJN6I5SN
Q9CZQ6sQXPJh5zN0BfYNwh03hFtNx0czmqfAISzitXA7+2DPs3yFw8SCpRpIG7zo
/WUUEvQZ+Ldrjbwh78vneIEui1cFcK2JqrVKVdlqpJqsnlILVJ7apvaqI+o79avy
eKI9lT31Pa083T1ZnhGeSZ4nPfM9qz1bPfmew57Tnkt4p6K8sd563tu93byZ3uHe
id7p3vne1d6t3nzvYe9p7yWvCqtkG1I8pE/Wr+fIHlvS05+JctnwXW18RyM7s0O9
vnYHZ7A+PmO8SysPRMa65mJJl36UHi2+zkP7m9Exb96rfLuWdzP8WOZOjy+UdNLw
X2avCPMdHv264XtVb5+v8bwUcfn1hcuK+6bHlzf9T7z3dgnf6S2bDB85eazfd2ht
puHJNT8L99W/doBcPrbaSxG+pisjTf+6fZsjfQumfmp4x7THo3xT6hU3PP/h2dE6
JdvQUt88G62/721oQZPno/VtD1oubbIlL1q/2rOzS8+WvBytFxZv79LcUPOAvhI0
cycmtAjojQ/Udmndl4cFdPF45dKmnwwP6FkXPS59f8eYgE60Srj02qFJAV0qI+TS
konPBXRumpk769E5AX0iwphs1LPzAjq2eZjp3b8koOu09rt0e+S6gP763jIuXZSb
H9CdWplHfbd7X0CPPWAO2Hfu1wG956NiLq00+HxAV1+V5NL2/kqWXtjLzD05qIql
OcnQU3OrW7ptTzM37se6lm5Sxqyb7Uux9NgCr0sPeFMtvbu0oXMq9rR0+lFzonNX
e1s6a6w5UYcRWZa+vMz0togYYOkWV8y6E8JyLH3hbvOonDF3W7rBj8awc7NHWXp5
ddPbbOpYSyfFRxvTrZ9m6avXAy4dsn6hpfPijdlLHdlg6Q0F5lXffXCHpTObmt7Y
8M8t/eUAs42CUccsPYijXNp/zA+Wnr3I9P4S/rOl/bMNvb70kqWPxpldfb73N0uv
aG56J3kLLJ3aMujSD5Ojg3rmRbPJfg3jgxr/ohv6Wo2gntfOXPely42C+qVc86j5
E5sF9bhLPnOi0clBvSLCGHbTlE5BfXDijW/tWkpQ74ozdu5SpWtQN3jBWHLKtrSg
3nq/sUbjellBvd5jjnC64aCgPvmqMWz+6fuDOmaJefKJ3PFBPankjT0/80BQzx9q
Fvr1t4lBvbtGuEu3VZke1LG1Te8X3Z/CicLMkx/qtSSoX+9mjJO4clNQc8v6Lm1w
6rugHtHGzF1a7VxQr1PmvF1r/BTUFd42vuKeM6C/7zcnytnyR1A3W2lOtCRDQvr6
cbPnxc08If32KkMzTnpDenCkWWjnLzqky18wC504Hh7Sa1829MmpVki/OyvFGDbU
P6RHege79I1ye0K+TrOnm22pV1JjtIyPdKk3bkCM7nM+waVZpWbF6Lsamd6dHZbG
6DBPVeNOO++O0aEPzPWfCO6N0X96jGWPlz0co9ekmTM8PuJIjH7/SIQdUxNG3zsw
YQT5qST+TF70H9wDcAQ=
'''

data = "".join(data.splitlines())
print(data)

import base64
data = base64.b64decode(data)

import zlib
data = zlib.decompress(data, wbits=-zlib.MAX_WBITS)
